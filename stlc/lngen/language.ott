metavar typvar, X, Y, Z ::= {{ repr-locally-nameless }}
metavar expvar, x, y, z ::= {{ repr-locally-nameless }}

grammar

typ, A, B, C :: typ_ ::=
  | unit           ::   :: unit
  | A1 -> A2       ::   :: arr
  | ( A )          :: S :: paren {{ coq ([[A]]) }}
  | { A2 / X } A1  :: M :: subst {{ coq (open_typ_wrt_typ [[X A1]] [[A2]]) }}

exp, e, f, g :: exp_ ::=
  | x                                   ::   :: var
  | unit                                ::   :: unit
  | \ x . e                             ::   :: abs  (+ bind x in e +)
  | e1 e2                               ::   :: app
  | ( e )                               :: S :: paren  {{ coq ([[e]]) }}
  | { e2 / x } e1                       :: M :: subst1 {{ coq (open_exp_wrt_exp [[x e1]] [[e2]]) }}

substitutions
  single e x :: subst_exp_in

freevars
  e x :: var_in