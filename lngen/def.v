(* generated by Ott 0.33, locally-nameless lngen from: lngen/systemf.ott *)
Require Import Bool.
Require Import Metalib.Metatheory.
Require Import List.
(** syntax *)
Definition typvar : Set := var.
Definition expvar : Set := var.

Inductive ftyp : Set := 
 | ftyp_var_b (_:nat)
 | ftyp_var_f (X:typvar)
 | ftyp_arr (A1:ftyp) (A2:ftyp)
 | ftyp_all (A:ftyp).

Inductive fexp : Set := 
 | fexp_var_b (_:nat)
 | fexp_var_f (x:expvar)
 | fexp_abs (A:ftyp) (e:fexp)
 | fexp_app (e1:fexp) (e2:fexp)
 | fexp_tabs (e:fexp)
 | fexp_tapp (e:fexp) (A:ftyp).

(* EXPERIMENTAL *)
(** auxiliary functions on the new list types *)
(** library functions *)
(** subrules *)
(** arities *)
(** opening up abstractions *)
Fixpoint open_ftyp_wrt_ftyp_rec (k:nat) (A_5:ftyp) (A__6:ftyp) {struct A__6}: ftyp :=
  match A__6 with
  | (ftyp_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => ftyp_var_b nat
        | inleft (right _) => A_5
        | inright _ => ftyp_var_b (nat - 1)
      end
  | (ftyp_var_f X) => ftyp_var_f X
  | (ftyp_arr A1 A2) => ftyp_arr (open_ftyp_wrt_ftyp_rec k A_5 A1) (open_ftyp_wrt_ftyp_rec k A_5 A2)
  | (ftyp_all A) => ftyp_all (open_ftyp_wrt_ftyp_rec (S k) A_5 A)
end.

Fixpoint open_fexp_wrt_fexp_rec (k:nat) (e_5:fexp) (e__6:fexp) {struct e__6}: fexp :=
  match e__6 with
  | (fexp_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => fexp_var_b nat
        | inleft (right _) => e_5
        | inright _ => fexp_var_b (nat - 1)
      end
  | (fexp_var_f x) => fexp_var_f x
  | (fexp_abs A e) => fexp_abs A (open_fexp_wrt_fexp_rec (S k) e_5 e)
  | (fexp_app e1 e2) => fexp_app (open_fexp_wrt_fexp_rec k e_5 e1) (open_fexp_wrt_fexp_rec k e_5 e2)
  | (fexp_tabs e) => fexp_tabs (open_fexp_wrt_fexp_rec k e_5 e)
  | (fexp_tapp e A) => fexp_tapp (open_fexp_wrt_fexp_rec k e_5 e) A
end.

Fixpoint open_fexp_wrt_ftyp_rec (k:nat) (A_5:ftyp) (e_5:fexp) {struct e_5}: fexp :=
  match e_5 with
  | (fexp_var_b nat) => fexp_var_b nat
  | (fexp_var_f x) => fexp_var_f x
  | (fexp_abs A e) => fexp_abs (open_ftyp_wrt_ftyp_rec k A_5 A) (open_fexp_wrt_ftyp_rec k A_5 e)
  | (fexp_app e1 e2) => fexp_app (open_fexp_wrt_ftyp_rec k A_5 e1) (open_fexp_wrt_ftyp_rec k A_5 e2)
  | (fexp_tabs e) => fexp_tabs (open_fexp_wrt_ftyp_rec (S k) A_5 e)
  | (fexp_tapp e A) => fexp_tapp (open_fexp_wrt_ftyp_rec k A_5 e) (open_ftyp_wrt_ftyp_rec k A_5 A)
end.

Definition open_fexp_wrt_fexp e_5 e__6 := open_fexp_wrt_fexp_rec 0 e__6 e_5.

Definition open_fexp_wrt_ftyp A_5 e_5 := open_fexp_wrt_ftyp_rec 0 e_5 A_5.

Definition open_ftyp_wrt_ftyp A_5 A__6 := open_ftyp_wrt_ftyp_rec 0 A__6 A_5.

(** terms are locally-closed pre-terms *)
(** definitions *)

(* defns LC_ftyp *)
Inductive lc_ftyp : ftyp -> Prop :=    (* defn lc_ftyp *)
 | lc_ftyp_var_f : forall (X:typvar),
     (lc_ftyp (ftyp_var_f X))
 | lc_ftyp_arr : forall (A1 A2:ftyp),
     (lc_ftyp A1) ->
     (lc_ftyp A2) ->
     (lc_ftyp (ftyp_arr A1 A2))
 | lc_ftyp_all : forall (A:ftyp),
      ( forall X , lc_ftyp  ( open_ftyp_wrt_ftyp A (ftyp_var_f X) )  )  ->
     (lc_ftyp (ftyp_all A)).

(* defns LC_fexp *)
Inductive lc_fexp : fexp -> Prop :=    (* defn lc_fexp *)
 | lc_fexp_var_f : forall (x:expvar),
     (lc_fexp (fexp_var_f x))
 | lc_fexp_abs : forall (A:ftyp) (e:fexp),
     (lc_ftyp A) ->
      ( forall x , lc_fexp  ( open_fexp_wrt_fexp e (fexp_var_f x) )  )  ->
     (lc_fexp (fexp_abs A e))
 | lc_fexp_app : forall (e1 e2:fexp),
     (lc_fexp e1) ->
     (lc_fexp e2) ->
     (lc_fexp (fexp_app e1 e2))
 | lc_fexp_tabs : forall (e:fexp),
      ( forall X , lc_fexp  ( open_fexp_wrt_ftyp e (ftyp_var_f X) )  )  ->
     (lc_fexp (fexp_tabs e))
 | lc_fexp_tapp : forall (e:fexp) (A:ftyp),
     (lc_fexp e) ->
     (lc_ftyp A) ->
     (lc_fexp (fexp_tapp e A)).
(** free variables *)
Fixpoint ftvar_in_ftyp (A_5:ftyp) : vars :=
  match A_5 with
  | (ftyp_var_b nat) => {}
  | (ftyp_var_f X) => {{X}}
  | (ftyp_arr A1 A2) => (ftvar_in_ftyp A1) \u (ftvar_in_ftyp A2)
  | (ftyp_all A) => (ftvar_in_ftyp A)
end.

Fixpoint fvar_in_fexp (e_5:fexp) : vars :=
  match e_5 with
  | (fexp_var_b nat) => {}
  | (fexp_var_f x) => {{x}}
  | (fexp_abs A e) => (fvar_in_fexp e)
  | (fexp_app e1 e2) => (fvar_in_fexp e1) \u (fvar_in_fexp e2)
  | (fexp_tabs e) => (fvar_in_fexp e)
  | (fexp_tapp e A) => (fvar_in_fexp e)
end.

Fixpoint ftvar_in_fexp (e_5:fexp) : vars :=
  match e_5 with
  | (fexp_var_b nat) => {}
  | (fexp_var_f x) => {}
  | (fexp_abs A e) => (ftvar_in_ftyp A) \u (ftvar_in_fexp e)
  | (fexp_app e1 e2) => (ftvar_in_fexp e1) \u (ftvar_in_fexp e2)
  | (fexp_tabs e) => (ftvar_in_fexp e)
  | (fexp_tapp e A) => (ftvar_in_fexp e) \u (ftvar_in_ftyp A)
end.

(** substitutions *)
Fixpoint subst_ftyp_in_ftyp (A_5:ftyp) (X5:typvar) (A__6:ftyp) {struct A__6} : ftyp :=
  match A__6 with
  | (ftyp_var_b nat) => ftyp_var_b nat
  | (ftyp_var_f X) => (if eq_var X X5 then A_5 else (ftyp_var_f X))
  | (ftyp_arr A1 A2) => ftyp_arr (subst_ftyp_in_ftyp A_5 X5 A1) (subst_ftyp_in_ftyp A_5 X5 A2)
  | (ftyp_all A) => ftyp_all (subst_ftyp_in_ftyp A_5 X5 A)
end.

Fixpoint subst_fexp_in_fexp (e_5:fexp) (x5:expvar) (e__6:fexp) {struct e__6} : fexp :=
  match e__6 with
  | (fexp_var_b nat) => fexp_var_b nat
  | (fexp_var_f x) => (if eq_var x x5 then e_5 else (fexp_var_f x))
  | (fexp_abs A e) => fexp_abs A (subst_fexp_in_fexp e_5 x5 e)
  | (fexp_app e1 e2) => fexp_app (subst_fexp_in_fexp e_5 x5 e1) (subst_fexp_in_fexp e_5 x5 e2)
  | (fexp_tabs e) => fexp_tabs (subst_fexp_in_fexp e_5 x5 e)
  | (fexp_tapp e A) => fexp_tapp (subst_fexp_in_fexp e_5 x5 e) A
end.

Fixpoint subst_ftyp_in_fexp (A_5:ftyp) (X5:typvar) (e_5:fexp) {struct e_5} : fexp :=
  match e_5 with
  | (fexp_var_b nat) => fexp_var_b nat
  | (fexp_var_f x) => fexp_var_f x
  | (fexp_abs A e) => fexp_abs (subst_ftyp_in_ftyp A_5 X5 A) (subst_ftyp_in_fexp A_5 X5 e)
  | (fexp_app e1 e2) => fexp_app (subst_ftyp_in_fexp A_5 X5 e1) (subst_ftyp_in_fexp A_5 X5 e2)
  | (fexp_tabs e) => fexp_tabs (subst_ftyp_in_fexp A_5 X5 e)
  | (fexp_tapp e A) => fexp_tapp (subst_ftyp_in_fexp A_5 X5 e) (subst_ftyp_in_ftyp A_5 X5 A)
end.


(** definitions *)


(** infrastructure *)
Hint Constructors lc_ftyp lc_fexp : core.


